"snakelocks anemone",
"Dahlia Anemone",
"Plumose Anemone",
"Pimplet Anemone"
)
anemone_data <- filter(inat_data, taxon.common_name.name %in% anemoneNms)
nrow(anemone_data)
# --------------------------------------------------
# Step 2: Map of Anenomes
# --------------------------------------------------
library(leaflet)
library(scales)
# Create a color palette based on common names
species_colors <- colorFactor(
palette = hue_pal()(length(unique(anemone_data$taxon.common_name.name))),
domain = anemone_data$taxon.common_name.name
)
leaflet(data = anemone_data) %>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addCircleMarkers(~ as.numeric(longitude), ~ as.numeric(latitude),
radius = 5,
color = ~ species_colors(taxon.common_name.name),
popup = ~ paste("Species:", taxon.common_name.name, " Date:", time_observed_at)
) %>%
addLegend("bottomright",
colors = scales::hue_pal()(length(unique(anemone_data$taxon.common_name.name))),
labels = unique(anemone_data$taxon.common_name.name),
title = "Species"
)
# --------------------------------------------------
# Step 3: Bar Plot - Records per Species (anemones)
# --------------------------------------------------
anemone_data <- table(anemone_data$taxon.common_name.name)
barplot(sort(anemone_data, decreasing = T), horiz = TRUE, cex.names = 0.9)
?barplot
install.packages("worrms")
library(worrms)
wm_records_taxamatch(name = 'Leucophaeus')
wm_records_taxamatch(name = 'Phocoena phocoena')
harbourPorpoise=wm_records_taxamatch(name = 'Phocoena phocoena')
harbourPorpoise$family
harbourPorpoise[1]
harbourPorpoise[[1]]
harbourPorpoise[[1]]$order
harbourPorpoise[[1]]$family
names(inat_data)
head(inat_data$taxon.name)
inat_data$taxon.name[1]
print(wm_records_taxamatch(name = inat_data$taxon.name[1]))
print(wm_records_taxamatch(name = inat_data$taxon.name[1])[[1]]$family)
# View the new dataset
View(inat_data)
harbourPorpoise=wm_records_taxamatch(name = 'Phocoena phocoena')
harbourPorpoise[[1]]$family
harbourPorpoise[[1]]$phylum
harbourPorpoise[[1]]$order
head(inat_data$taxon.name)
head(inat_data$taxon.common_name.name)
print(wm_records_taxamatch(name = inat_data$taxon.name[1])[[1]]$family)
print(wm_records_taxamatch(name = inat_data$taxon.name[1])[[1]]$family)
print(wm_records_taxamatch(name = inat_data$taxon.name[1])[[1]]$order)
print(wm_records_taxamatch(name = inat_data$taxon.name[1])[[1]]$order)
print(wm_records_taxamatch(name = inat_data$taxon.name[2])[[1]]$order)
print(wm_records_taxamatch(name = inat_data$taxon.name[2])[[1]]$phylum)
print(wm_records_taxamatch(name = inat_data$taxon.name[2])[[1]]$family)
print(wm_records_taxamatch(name = inat_data$taxon.name[2])[[1]]$genus)
print(wm_records_taxamatch(name = inat_data$taxon.name[2])[[1]]$species)
inat_data$taxon.name[2]
length(inat_data[1,])
length(inat_data[,1])
length(inat_data)
length(inat_data[,1])
inat_data$taxon.name[a]
a = 2
inat_data$taxon.name[a]
taxOrder = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$order
taxFamily = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$family
taxOrder
taxFamily
# ------------------------------------------------------------------------------
#        Add and fill columns for Order and Family to iNaturalist dataframe
# ------------------------------------------------------------------------------
# Adding new columns to inat_data for taxa Order and Family
taxon.order = rep(NA, times = length(inat_data[,1]))
taxon.family = rep(NA, times = length(inat_data[,1]))
inat_data = merge(inat_data,cbind(taxon.order,taxon.family))
names(inat_data)
# clean global environment
rm(taxon.order,taxon.family)
# filling in new inat_data columns for taxa Order and Family
for (a in 1:length(inat_data[,1])) {
taxOrder = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$order
taxFamily = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$family
inat_data$taxon.order[a] = taxOrder
inat_data$taxon.order[a] = taxFamily
# message to check it has matched up properly
print(paste("inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"WoRMS Order =",taxOrder,
"WoRMS Family =",taxFamily,
"inat_data new entries =",
inat_data$taxon.order[a],"and",
inat_data$taxon.family[a],
sep=" "))
# fail-safe for filling rows
rm(taxOrder,taxFamily)
}
# filling in new inat_data columns for taxa Order and Family
for (a in 1:length(inat_data[,1])) {
taxOrder = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$order
taxFamily = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$family
inat_data$taxon.order[a] = taxOrder
inat_data$taxon.family[a] = taxFamily
# message to check it has matched up properly
print(paste("inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"WoRMS Order =",taxOrder,
"WoRMS Family =",taxFamily,
"inat_data new entries =",
inat_data$taxon.order[a],"and",
inat_data$taxon.family[a],
sep=" "))
# fail-safe for filling rows
rm(taxOrder,taxFamily)
}
# filling in new inat_data columns for taxa Order and Family
for (a in 1:length(inat_data[,1])) {
taxOrder = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$order
taxFamily = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$family
inat_data$taxon.order[a] = taxOrder
inat_data$taxon.family[a] = taxFamily
# message to check it has matched up properly
print(paste("inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"WoRMS Order =",taxOrder,
"WoRMS Family =",taxFamily,
"inat_data new entries =",
inat_data$taxon.order[a],"and",
inat_data$taxon.family[a],
sep=" , "))
# fail-safe for filling rows
rm(taxOrder,taxFamily)
}
# filling in new inat_data columns for taxa Order and Family
for (a in 1:length(inat_data[,1])) {
taxOrder = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$order
taxFamily = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$family
inat_data$taxon.order[a] = taxOrder
inat_data$taxon.family[a] = taxFamily
# message to check it has matched up properly
print(paste("inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"WoRMS Order =",taxOrder,
"WoRMS Family =",taxFamily,
"inat_data new entries =",
inat_data$taxon.order[a],"and",
inat_data$taxon.family[a],
sep=", "))
# fail-safe for filling rows
rm(taxOrder,taxFamily)
}
# filling in new inat_data columns for taxa Order and Family
for (a in 1:length(inat_data[,1])) {
taxOrder = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$order
taxFamily = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$family
inat_data$taxon.order[a] = taxOrder
inat_data$taxon.family[a] = taxFamily
# message to check it has matched up properly
print(paste("inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"WoRMS Order =",taxOrder,
"WoRMS Family =",taxFamily,
"inat_data new entries =",
inat_data$taxon.order[a],
inat_data$taxon.family[a],
sep=", "))
# fail-safe for filling rows
rm(taxOrder,taxFamily)
}
head(inat_data[,76:77])
head(inat_data$taxon.common_name.name)
a = 6
wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$order
inat_data$taxon.name[a]
?tryCatch
tryCatch(1, finally = print("Hello"))
e <- simpleError("test error")
## Not run:
stop(e)
taxon.order="NA"
taxon.order
a
tryCatch(taxOrder = wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$order,
finally=taxon.order = "Sp. not in WoRMS")
tryCatch(taxOrder = wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$order,
finally=parse(eval(paste=c("taxon.order = Sp. not in WoRMS"))))
try(taxOrder = wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$order)
taxOrder = "NA"
try(taxOrder = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$order)
a = 1
try(taxOrder = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$order)
try(taxOrder = wm_records_taxamatch(inat_data$taxon.name[a])[[1]]$order)
taxOrder = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$order
tryMatch = function (a) {
taxOrder = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$order
taxFamily = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$family
inat_data$taxon.order[a] = taxOrder
inat_data$taxon.family[a] = taxFamily
}
View(tryMatch)
a
taxOrder = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$order
a = 2
taxOrder = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$order
taxOrder = "NA"
taxFamily = "NA"
# function to try in loop below (in case species is not in the WoRMS)
tryMatch = function (a) {
taxOrder = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$order
taxFamily = wm_records_taxamatch(name = inat_data$taxon.name[a])[[1]]$family
return(taxOrder,taxFamily)
}
# function to try in loop below (in case species is not in the WoRMS)
tryMatch = function (sppNm) {
taxOrder =
wm_records_taxamatch(name = inat_data$taxon.name[sppNm])[[1]]$order
taxFamily =
wm_records_taxamatch(name = inat_data$taxon.name[sppNm])[[1]]$family
return(taxOrder,taxFamily)
}
# filling in new inat_data columns for taxa Order and Family
for (a in 1:length(inat_data[,1])) {
taxOrder = "NA"
taxFamily = "NA"
try(tryMatch(a))
inat_data$taxon.order[a] = taxOrder
inat_data$taxon.family[a] = taxFamily
# message to check it has matched up properly
print(paste("inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"WoRMS Order =",taxOrder,
"WoRMS Family =",taxFamily,
"inat_data new entries =",
inat_data$taxon.order[a],
inat_data$taxon.family[a],
sep=", "))
# fail-safe for filling rows
rm(taxOrder,taxFamily)
}
# function to try in loop below (in case species is not in the WoRMS)
tryOrder = function (sppNm) {
taxOrder =
wm_records_taxamatch(name = inat_data$taxon.name[sppNm])[[1]]$order
return(taxOrder)
}
tryFamily = function (sppNm) {
taxFamily =
wm_records_taxamatch(name = inat_data$taxon.name[sppNm])[[1]]$family
return(taxFamily)
}
a = 1
# functions to try in loop below (in case species is not in the WoRMS)
tryOrder = function (sppNm) {
taxOrder =
wm_records_taxamatch(name = inat_data$taxon.name[sppNm])[[1]]$order
return(taxOrder)
}
tryFamily = function (sppNm) {
taxFamily =
wm_records_taxamatch(name = inat_data$taxon.name[sppNm])[[1]]$family
return(taxFamily)
}
taxOrder = "NA"
taxFamily = "NA"
taxOrder
taxFamily
# message to check it has matched up properly
print(paste("inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"WoRMS Order =",taxOrder,
"WoRMS Family =",taxFamily,
"inat_data new entries =",
inat_data$taxon.order[a],
inat_data$taxon.family[a],
sep=", "))
try(tryOrder(a))
try(tryFamily(a))
inat_data$taxon.order[a] = taxOrder
inat_data$taxon.family[a] = taxFamily
# message to check it has matched up properly
print(paste("inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"WoRMS Order =",taxOrder,
"WoRMS Family =",taxFamily,
"inat_data new entries =",
inat_data$taxon.order[a],
inat_data$taxon.family[a],
sep=", "))
taxOrder = "NA"
taxFamily = "NA"
inat_data$taxon.order[a] = try(tryOrder(a))
inat_data$taxon.family[a] = try(tryFamily(a))
# message to check it has matched up properly
print(paste("inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"WoRMS Order =",taxOrder,
"WoRMS Family =",taxFamily,
"inat_data new entries =",
inat_data$taxon.order[a],
inat_data$taxon.family[a],
sep=", "))
# message to check it has matched up properly
print(paste(
"inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"WoRMS Order =",taxOrder,
"WoRMS Family =",taxFamily,
"inat_data new entries =",
inat_data$taxon.order[a],
inat_data$taxon.family[a],
sep=", "))
# message to check it has matched up properly
print(paste(
"inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"inat_data new entries =",
inat_data$taxon.order[a],
inat_data$taxon.family[a],
sep=", "))
# filling in new inat_data columns for taxa Order and Family
for (a in 1:length(inat_data[,1])) {
taxOrder = "NA"
taxFamily = "NA"
inat_data$taxon.order[a] = try(tryOrder(a))
inat_data$taxon.family[a] = try(tryFamily(a))
# message to check it has matched up properly
print(paste(
"inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"inat_data new entries =",
inat_data$taxon.order[a],
inat_data$taxon.family[a],
sep=", "))
# fail-safe for filling rows
rm(taxOrder,taxFamily)
}
# filling in new inat_data columns for taxa Order and Family
for (a in 1:length(inat_data[,1])) {
taxOrder = "NA"
taxFamily = "NA"
inat_data$taxon.order[a] = tryCatch(tryOrder(a))
inat_data$taxon.family[a] = tryCatch(tryFamily(a))
# message to check it has matched up properly
print(paste(
"inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"inat_data new entries =",
inat_data$taxon.order[a],
inat_data$taxon.family[a],
sep=", "))
# fail-safe for filling rows
rm(taxOrder,taxFamily)
}
# filling in new inat_data columns for taxa Order and Family
for (a in 1:length(inat_data[,1])) {
taxOrder = "NA"
taxFamily = "NA"
inat_data$taxon.order[a] = tryCatch(tryOrder(a),finally = print("hi"))
inat_data$taxon.family[a] = tryCatch(tryFamily(a),finally = print("hi"))
# message to check it has matched up properly
print(paste(
"inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"inat_data new entries =",
inat_data$taxon.order[a],
inat_data$taxon.family[a],
sep=", "))
# fail-safe for filling rows
rm(taxOrder,taxFamily)
}
# filling in new inat_data columns for taxa Order and Family
for (a in 1:length(inat_data[,1])) {
taxOrder = "NA"
taxFamily = "NA"
inat_data$taxon.order[a] = try(tryOrder(a))
inat_data$taxon.family[a] = try(tryFamily(a))
# message to check it has matched up properly
print(paste(
"inat_data taxon name =",inat_data$taxon.name[a],
"WoRMS scientific name =",wm_records_taxamatch(
name = inat_data$taxon.name[a])[[1]]$scientificname,
"inat_data new entries =",
inat_data$taxon.order[a],
inat_data$taxon.family[a],
sep=", "))
# fail-safe for filling rows
rm(taxOrder,taxFamily)
}
# filling in new inat_data columns for taxa Order and Family
for (a in 1:length(inat_data[,1])) {
taxOrder = "NA"
taxFamily = "NA"
inat_data$taxon.order[a] = try(tryOrder(a))
inat_data$taxon.family[a] = try(tryFamily(a))
# message to check it has matched up properly
# print(paste(
#      "inat_data taxon name =",inat_data$taxon.name[a],
#      "WoRMS scientific name =",wm_records_taxamatch(
#        name = inat_data$taxon.name[a])[[1]]$scientificname,
#      "inat_data new entries =",
#      inat_data$taxon.order[a],
#      inat_data$taxon.family[a],
#      sep=", "))
# fail-safe for filling rows
rm(taxOrder,taxFamily)
}
View(inat_data)
View(inat_data)
View(inat_data)
# ------------------------------------------------------------------------------
#                      Download Data from the iNaturalist Project
# ------------------------------------------------------------------------------
# Define project ID and API parameters
project_slug <- "brpc-national-bioblitz-2025-practice"
# Download data using the rinat package
inat_data <- get_inat_obs_project(project_slug)
# View the new data set
View(inat_data)
l = length(inat_data[,1])
# Convert observed_on to date-time for comparison
inat_data$updated_at <- ymd_hms(inat_data$updated_at)
inat_data$time_observed_at <- ymd_hms(inat_data$time_observed_at)
last_update <- max(inat_data$updated_at)
cat("Last update:", as.character(last_update), "\n")
# ------------------------------------------------------------------------------
#        Add and fill columns for Order and Family to iNaturalist dataframe
# ------------------------------------------------------------------------------
# Adding new columns to inat_data for taxa Order and Family
taxon.order = rep(NA, times = length(inat_data[,1]))
taxon.family = rep(NA, times = length(inat_data[,1]))
inat_data = merge(inat_data,cbind(taxon.order,taxon.family))
# clean global environment
rm(taxon.order,taxon.family)
# functions to try in loop below (in case species is not in the WoRMS)
tryOrder = function (sppNm) {
taxOrder =
wm_records_taxamatch(name = inat_data$taxon.name[sppNm])[[1]]$order
return(taxOrder)
}
tryFamily = function (sppNm) {
taxFamily =
wm_records_taxamatch(name = inat_data$taxon.name[sppNm])[[1]]$family
return(taxFamily)
}
l = length(inat_data[,1])
l = length(inat_data[,4])
# filling in new inat_data columns for taxa Order and Family
for (a in 1:l) {
taxOrder = "NA"
taxFamily = "NA"
inat_data$taxon.order[a] = try(tryOrder(a))
inat_data$taxon.family[a] = try(tryFamily(a))
# message to check it has matched up properly
# print(paste(
#      "inat_data taxon name =",inat_data$taxon.name[a],
#      "WoRMS scientific name =",wm_records_taxamatch(
#        name = inat_data$taxon.name[a])[[1]]$scientificname,
#      "inat_data new entries =",
#      inat_data$taxon.order[a],
#      inat_data$taxon.family[a],
#      sep=", "))
# fail-safe for filling rows
rm(taxOrder,taxFamily)
}
Bibiomarci= GET("https://www.marinespecies.org/rest/AphiaRecordsByMatchNames?scientificnames%5B%5D=Bibio%20marci&marine_only=false&extant_only=true&match_authority=true
")
curl -X 'GET' \
# ------------------------------------------------------------------------------
#                     Adding World Register of Marine Species Data
# ------------------------------------------------------------------------------
install.packages(c("httr", "jsonlite"))
install.packages(c("httr", "jsonlite"))
library(jsonlite)
res = GET("https://api.open-notify.org/astros.json")
url <- "http://api.openweathermap.org/data/2.5/weather"
api_key <- "Enter API KEY"
city <- "New Delhi"
country <- "IN"
params <- list(q = paste(city,country,sep =",") , appid=api_key)
res <- GET(url,query=params)
ans <- fromJSON(content(res,"text"),flatten=TRUE)
tem <- ans$main$temp - 273.15
print(paste("The temperature is", round(tem,2), "C in", city))
library(jsonlite)
library(httr)

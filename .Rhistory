taxon.order,
taxon.family,
marine,
freshwater,
brackish,
terrestrial
)
# clean up the global environment
rm(taxon.kingdom,
taxon.phylum,
taxon.class,
taxon.order,
taxon.family,
marine,
freshwater,
brackish,
terrestrial
)
# filling in new inat_data columns with taxonomic information from WoRMS
l = length(inat_data[,1])
a=1
is.na(inat_data$taxon.rank[a])==FALSE && inat_data$taxon.rank[a]=="species"
binomClassNm = inat_data$taxon.name[a]
binomClassNmSplit = strsplit(binomClassNm,"[ ]")
genus = binomClassNmSplit[[1]][1]
species = binomClassNmSplit[[1]][2]
api = paste("https://www.marinespecies.org/rest/AphiaRecordsByName/",
genus,
"%20",
species,
"?like=true&marine_only=false&extant_only=true&offset=1",sep = "")
taxonInfo = GET(api)
taxonInfoContent = httr::content(taxonInfo, as = 'text')
object.size(taxonInfoContent)>112
taxonInfoContentJSON = jsonlite::fromJSON(taxonInfoContent)
kin = taxonInfoContentJSON$kingdom[1]
phy = taxonInfoContentJSON$phylum[1]
cls = taxonInfoContentJSON$class[1]
ord = taxonInfoContentJSON$order[1]
fam = taxonInfoContentJSON$family[1]
inat_data$taxon.kingdom[a] = kin
inat_data$taxon.phylum[a] = phy
inat_data$taxon.class[a] = cls
inat_data$taxon.order[a] = ord
inat_data$taxon.family[a] = fam
taxonInfoContentJSON$isMarine[1]
names(taxonInfoContentJSON)
taxonInfoContentJSON$isFreshwater[1]
is.na(taxonInfoContentJSON$isFreshwater[1])==FALSE
is.na(taxonInfoContentJSON$isFreshwater[1])
# ------------------------------------------------------------------------------
#                      Download Data from the iNaturalist Project
# ------------------------------------------------------------------------------
# Define project ID and API parameters
project_slug <- "brpc-national-bioblitz-2025-practice"
# Download data using the rinat package
inat_data <- get_inat_obs_project(project_slug)
# Convert observed_on to date-time for comparison
inat_data$updated_at <- ymd_hms(inat_data$updated_at)
inat_data$time_observed_at <- ymd_hms(inat_data$time_observed_at)
last_update <- max(inat_data$updated_at)
cat("Last update:", as.character(last_update), "\n")
# ------------------------------------------------------------------------------
#        Add and fill columns for Order and Family to iNaturalist dataframe
# ------------------------------------------------------------------------------
# Create new empty columns to merge with inat_data for taxonomy data
taxon.kingdom = rep(NA, times = length(inat_data[,1]))
taxon.phylum = rep(NA, times = length(inat_data[,1]))
taxon.class = rep(NA, times = length(inat_data[,1]))
taxon.order = rep(NA, times = length(inat_data[,1]))
taxon.family = rep(NA, times = length(inat_data[,1]))
marine = rep(NA, times = length(inat_data[,1]))
brackish = rep(NA, times = length(inat_data[,1]))
freshwater = rep(NA, times = length(inat_data[,1]))
terrestrial = rep(NA, times = length(inat_data[,1]))
# Merge the inat_data dataframe with the new taxon columns
inat_data = cbind(inat_data,
taxon.kingdom,
taxon.phylum,
taxon.class,
taxon.order,
taxon.family,
marine,
brackish,
freshwater,
terrestrial
)
# clean up the global environment
rm(taxon.kingdom,
taxon.phylum,
taxon.class,
taxon.order,
taxon.family,
marine,
brackish,
freshwater,
terrestrial
)
a=1
is.na(inat_data$taxon.rank[a])==FALSE && inat_data$taxon.rank[a]=="species"
binomClassNm = inat_data$taxon.name[a]
binomClassNmSplit = strsplit(binomClassNm,"[ ]")
genus = binomClassNmSplit[[1]][1]
species = binomClassNmSplit[[1]][2]
api = paste("https://www.marinespecies.org/rest/AphiaRecordsByName/",
genus,
"%20",
species,
"?like=true&marine_only=false&extant_only=true&offset=1",sep = "")
taxonInfo = GET(api)
taxonInfoContent = httr::content(taxonInfo, as = 'text')
object.size(taxonInfoContent)>112
taxonInfoContentJSON = jsonlite::fromJSON(taxonInfoContent)
inat_data$taxon.kingdom[a] = taxonInfoContentJSON$kingdom[1]
inat_data$taxon.phylum[a] = taxonInfoContentJSON$phylum[1]
inat_data$taxon.class[a] = taxonInfoContentJSON$class[1]
inat_data$taxon.order[a] = taxonInfoContentJSON$order[1]
inat_data$taxon.family[a] = taxonInfoContentJSON$family[1]
is.na(taxonInfoContentJSON$isMarine[1]
)
is.na(taxonInfoContentJSON$isMarine[1])==FALSE
if(is.na(taxonInfoContentJSON$isMarine[1])==FALSE) {
inat_data$marine[a] = taxonInfoContentJSON$isMarine[1]
} else {
inat_data$marine[a] = "NA"
}
if(is.na(taxonInfoContentJSON$isBrackish[1])==FALSE) {
inat_data$brackish[a] = taxonInfoContentJSON$isBrackish[1]
} else {
inat_data$brackish[a] = "NA"
}
if(is.na(taxonInfoContentJSON$isFreshwater[1])==FALSE) {
inat_data$freshwater[a] = taxonInfoContentJSON$isFreshwater[1]
} else {
inat_data$freshwater[a] = "NA"
}
if(is.na(taxonInfoContentJSON$isTerrestrial[1])==FALSE) {
inat_data$terrestrial[a] = taxonInfoContentJSON$isTerrestrial[1]
} else {
inat_data$terrestrial[a] = "NA"
}
if(object.size(taxonInfoContent)>112) {
taxonInfoContentJSON = jsonlite::fromJSON(taxonInfoContent)
inat_data$taxon.kingdom[a] = taxonInfoContentJSON$kingdom[1]
inat_data$taxon.phylum[a] = taxonInfoContentJSON$phylum[1]
inat_data$taxon.class[a] = taxonInfoContentJSON$class[1]
inat_data$taxon.order[a] = taxonInfoContentJSON$order[1]
inat_data$taxon.family[a] = taxonInfoContentJSON$family[1]
if(is.na(taxonInfoContentJSON$isMarine[1])==FALSE) {
inat_data$marine[a] = taxonInfoContentJSON$isMarine[1]
} else {
inat_data$marine[a] = "NA"
}
if(is.na(taxonInfoContentJSON$isBrackish[1])==FALSE) {
inat_data$brackish[a] = taxonInfoContentJSON$isBrackish[1]
} else {
inat_data$brackish[a] = "NA"
}
if(is.na(taxonInfoContentJSON$isFreshwater[1])==FALSE) {
inat_data$freshwater[a] = taxonInfoContentJSON$isFreshwater[1]
} else {
inat_data$freshwater[a] = "NA"
}
if(is.na(taxonInfoContentJSON$isTerrestrial[1])==FALSE) {
inat_data$terrestrial[a] = taxonInfoContentJSON$isTerrestrial[1]
} else {
inat_data$terrestrial[a] = "NA"
}
} else {
inat_data$taxon.kingdom[a] = "taxon info not retrieved"
}
View(inat_data)
?GET
?content
# filling in new inat_data columns with taxonomic information from WoRMS
l = length(inat_data[,1])
for (a in 1:l) {
if (is.na(inat_data$taxon.rank[a])==FALSE && inat_data$taxon.rank[a]=="species"){
binomClassNm = inat_data$taxon.name[a]
binomClassNmSplit = strsplit(binomClassNm,"[ ]")
genus = binomClassNmSplit[[1]][1]
species = binomClassNmSplit[[1]][2]
api = paste("https://www.marinespecies.org/rest/AphiaRecordsByName/",
genus,
"%20",
species,
"?like=true&marine_only=false&extant_only=true&offset=1",sep = "")
taxonInfo = GET(api)
taxonInfoContent = httr::content(taxonInfo, as = 'text')
if(object.size(taxonInfoContent)>112) {
taxonInfoContentJSON = jsonlite::fromJSON(taxonInfoContent)
inat_data$taxon.kingdom[a] = taxonInfoContentJSON$kingdom[1]
inat_data$taxon.phylum[a] = taxonInfoContentJSON$phylum[1]
inat_data$taxon.class[a] = taxonInfoContentJSON$class[1]
inat_data$taxon.order[a] = taxonInfoContentJSON$order[1]
inat_data$taxon.family[a] = taxonInfoContentJSON$family[1]
if(is.na(taxonInfoContentJSON$isMarine[1])==FALSE) {
inat_data$marine[a] = taxonInfoContentJSON$isMarine[1]
} else {
inat_data$marine[a] = "NA"
}
if(is.na(taxonInfoContentJSON$isBrackish[1])==FALSE) {
inat_data$brackish[a] = taxonInfoContentJSON$isBrackish[1]
} else {
inat_data$brackish[a] = "NA"
}
if(is.na(taxonInfoContentJSON$isFreshwater[1])==FALSE) {
inat_data$freshwater[a] = taxonInfoContentJSON$isFreshwater[1]
} else {
inat_data$freshwater[a] = "NA"
}
if(is.na(taxonInfoContentJSON$isTerrestrial[1])==FALSE) {
inat_data$terrestrial[a] = taxonInfoContentJSON$isTerrestrial[1]
} else {
inat_data$terrestrial[a] = "NA"
}
} else {
inat_data$taxon.kingdom[a] = "taxon info not retrieved"
}
}
}
summary(inat_data$brackish)
unique(inat_data$freshwater)
inat_data$brackish = as.numeric(inat_data$brackish)
summary(inat_data$brackish)
inat_data$freshwater = as.numeric(inat_data$freshwater)
inat_data$marine = as.numeric(inat_data$marine)
inat_data$terrestrial = as.numeric(inat_data$terrestrial)
unique(inat_data$taxon.order)
anemone_data <- filter(inat_data, taxon.common_name.name %in% "Actiniaria")
anemone_data <- filter(inat_data, taxon.order %in% "Actiniaria")
View(anemone_data)
nrow(anemone_data)
# ------------------------------------------------------------------------------
#                             Step 2: Map of Anemones
# ------------------------------------------------------------------------------
library(leaflet)
library(scales)
# Create a color palette based on common names
species_colors <- colorFactor(
palette = hue_pal()(length(unique(anemone_data$taxon.common_name.name))),
domain = anemone_data$taxon.common_name.name
)
leaflet(data = anemone_data) %>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addCircleMarkers(~ as.numeric(longitude), ~ as.numeric(latitude),
radius = 5,
color = ~ species_colors(taxon.common_name.name),
popup = ~ paste("Species:", taxon.common_name.name, " Date:", time_observed_at)
) %>%
addLegend("bottomright",
colors = scales::hue_pal()(
length(unique(anemone_data$taxon.common_name.name))
),
labels = unique(anemone_data$taxon.common_name.name),
title = "Species"
)
anemoneNms = c(
"Atlantic Beadlet Anemone",
"Strawberry Anemone",
"Gem Anemone",
"Daisy Anemone",
"snakelocks anemone",
"Dahlia Anemone",
"Plumose Anemone",
"Pimplet Anemone"
)
anemone_data <- filter(inat_data, taxon.common_name.name %in% anemoneNms)
nrow(anemone_data)
# Create a color palette based on common names
species_colors <- colorFactor(
palette = hue_pal()(length(unique(anemone_data$taxon.common_name.name))),
domain = anemone_data$taxon.common_name.name
)
leaflet(data = anemone_data) %>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addCircleMarkers(~ as.numeric(longitude), ~ as.numeric(latitude),
radius = 5,
color = ~ species_colors(taxon.common_name.name),
popup = ~ paste("Species:", taxon.common_name.name, " Date:", time_observed_at)
) %>%
addLegend("bottomright",
colors = scales::hue_pal()(
length(unique(anemone_data$taxon.common_name.name))
),
labels = unique(anemone_data$taxon.common_name.name),
title = "Species"
)
# ------------------------------------------------------------------------------
#                 Step 3: Bar Plot - Records per Species (anemones)
# ------------------------------------------------------------------------------
anemone_data <- table(anemone_data$taxon.common_name.name)
barplot(sort(anemone_data, decreasing = T), horiz = TRUE, cex.names = 0.9)
barplot(sort(anemone_data, decreasing = T), horiz = TRUE, cex.names = 0.9,las = 2)
barplot(sort(anemone_data, decreasing = T), horiz = TRUE, cex.names = 0.5,las = 2)
barplot(sort(anemone_data, decreasing = T), horiz = FALSE, cex.names = 0.5,las = 2)
# Load the non-native species list
non_native_species <- read.csv("data/UK marine NNS.csv")
# Match observations against non-native species list
natbioblitz_nns <- subset(inat_data, taxon.id %in% non_native_species$inat_id)
getdir()
getwd()
setwd("C:/Users/Rose/rock_pool_bioblitz")
getwd()
rm(species,project_slug,taxonInfoContentJSON,a)
rm(genus)
rm(binomClassNm)
rm(binomClassNmSplit)
rm(taxonInfo,taxonInfoContent)
rm(l)
rm(api)
# Load the non-native species list
non_native_species <- read.csv("data/UK marine NNS.csv")
# Match observations against non-native species list
natbioblitz_nns <- subset(inat_data, taxon.id %in% non_native_species$inat_id)
cat("Number of non-native species records found:", nrow(natbioblitz_nns), "\n")
View(natbioblitz_nns)
# Create a colour palette based on scientific names
species_colors <- colorFactor(
palette = hue_pal()(length(unique(natbioblitz_nns$taxon.common_name.name))),
domain = natbioblitz_nns$taxon.common_name.name
)
leaflet(data = natbioblitz_nns) %>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addCircleMarkers(~ as.numeric(longitude), ~ as.numeric(latitude),
radius = 5,
color = ~ species_colors(taxon.common_name.name),
popup = ~ paste("Species:", taxon.common_name.name, " Date:", time_observed_at)
) %>%
addLegend("bottomright",
colors = scales::hue_pal()(length(unique(natbioblitz_nns$taxon.common_name.name))),
labels = unique(natbioblitz_nns$taxon.common_name.name),
title = "Species"
)
species_count <- table(natbioblitz_nns$taxon.common_name.name)
barplot(sort(species_count, decreasing = T),horiz = TRUE, cex.names = 0.9)
barplot(sort(species_count, decreasing = T),
horiz = TRUE, cex.names = 0.9,las = 2)
barplot(sort(species_count, decreasing = T),
horiz = TRUE, cex.names = 0.5,las = 2)
unique(inat_data$taxon.order)
# Filter anenome data
anemone_data <- filter(inat_data, taxon.order %in% "Actiniaria")
nrow(anemone_data)
# Create a color palette based on common names
species_colors <- colorFactor(
palette = hue_pal()(length(unique(anemone_data$taxon.common_name.name))),
domain = anemone_data$taxon.common_name.name
)
leaflet(data = anemone_data) %>%
addProviderTiles(providers$Esri.OceanBasemap) %>%
addCircleMarkers(~ as.numeric(longitude), ~ as.numeric(latitude),
radius = 5,
color = ~ species_colors(taxon.common_name.name),
popup = ~ paste("Species:", taxon.common_name.name, " Date:", time_observed_at)
) %>%
addLegend("bottomright",
colors = scales::hue_pal()(
length(unique(anemone_data$taxon.common_name.name))
),
labels = unique(anemone_data$taxon.common_name.name),
title = "Species"
)
View(inat_data)
# ------------------------------------------------------------------------------
#                      Download Data from the iNaturalist Project
# ------------------------------------------------------------------------------
# Define project ID and API parameters
project_slug <- "brpc-national-bioblitz-2025-practice"
# Download data using the rinat package
inat_data <- get_inat_obs_project(project_slug)
# Convert observed_on to date-time for comparison
inat_data$updated_at <- ymd_hms(inat_data$updated_at)
inat_data$time_observed_at <- ymd_hms(inat_data$time_observed_at)
last_update <- max(inat_data$updated_at)
cat("Last update:", as.character(last_update), "\n")
# ------------------------------------------------------------------------------
#        Add and fill columns for Order and Family to iNaturalist dataframe
# ------------------------------------------------------------------------------
# Create new empty columns to merge with inat_data for taxonomy data
taxon.kingdom = rep(NA, times = length(inat_data[,1]))
taxon.phylum = rep(NA, times = length(inat_data[,1]))
taxon.class = rep(NA, times = length(inat_data[,1]))
taxon.order = rep(NA, times = length(inat_data[,1]))
taxon.family = rep(NA, times = length(inat_data[,1]))
marine = rep(NA, times = length(inat_data[,1]))
brackish = rep(NA, times = length(inat_data[,1]))
freshwater = rep(NA, times = length(inat_data[,1]))
terrestrial = rep(NA, times = length(inat_data[,1]))
# Merge the inat_data dataframe with the new taxon columns
inat_data = cbind(inat_data,
taxon.kingdom,
taxon.phylum,
taxon.class,
taxon.order,
taxon.family,
marine,
brackish,
freshwater,
terrestrial
)
# clean up the global environment
rm(taxon.kingdom,
taxon.phylum,
taxon.class,
taxon.order,
taxon.family,
marine,
brackish,
freshwater,
terrestrial
)
View(inat_data)
a = 1
is.na(inat_data$taxon.rank[a])==FALSE && inat_data$taxon.rank[a]=="species"
inat_data$taxon.rank[a]
inat_data$taxon.name[a]
# filling in new inat_data columns with taxonomic information from WoRMS
l = length(inat_data[,1])
a
inat_data$freshwater[1]
inat_data$iconic_taxon.name[1]
inat_data$iconic_taxon.name[2]
inat_data$iconic_taxon.name[3]
inat_data$iconic_taxon.name[4]
inat_data$iconic_taxon.name[5]
a=1
is.na(inat_data$taxon.rank[a])==FALSE && inat_data$taxon.rank[a]=="species"
inat_data$taxon.name[a]
binomClassNm = inat_data$taxon.name[a]
binomClassNm
binomClassNmSplit = strsplit(binomClassNm,"[ ]")
binomClassNmSplit
genus = binomClassNmSplit[[1]][1]
species = binomClassNmSplit[[1]][2]
genus
species
api = paste("https://www.marinespecies.org/rest/AphiaRecordsByName/",
genus,
"%20",
species,
"?like=true&marine_only=false&extant_only=true&offset=1",sep = "")
api
taxonInfo = GET(api)
taxonInfoContent = httr::content(taxonInfo, as = 'text')
object.size(taxonInfoContent)>112
taxonInfoContentJSON = jsonlite::fromJSON(taxonInfoContent)
inat_data$taxon.kingdom[a] = taxonInfoContentJSON$kingdom[1]
inat_data$taxon.phylum[a] = taxonInfoContentJSON$phylum[1]
inat_data$taxon.class[a] = taxonInfoContentJSON$class[1]
inat_data$taxon.order[a] = taxonInfoContentJSON$order[1]
inat_data$taxon.family[a] = taxonInfoContentJSON$family[1]
taxonInfoContentJSON$kingdom[1]
inat_data$taxon.kingdom[a]
# filling in new inat_data columns with taxonomic information from WoRMS
l = length(inat_data[,1])
for (a in 1:l) {
if (is.na(inat_data$taxon.rank[a])==FALSE && inat_data$taxon.rank[a]=="species"){
binomClassNm = inat_data$taxon.name[a]
binomClassNmSplit = strsplit(binomClassNm,"[ ]")
genus = binomClassNmSplit[[1]][1]
species = binomClassNmSplit[[1]][2]
api = paste("https://www.marinespecies.org/rest/AphiaRecordsByName/",
genus,
"%20",
species,
"?like=true&marine_only=false&extant_only=true&offset=1",sep = "")
taxonInfo = GET(api)
taxonInfoContent = httr::content(taxonInfo, as = 'text')
if(object.size(taxonInfoContent)>112) {
taxonInfoContentJSON = jsonlite::fromJSON(taxonInfoContent)
inat_data$taxon.kingdom[a] = taxonInfoContentJSON$kingdom[1]
inat_data$taxon.phylum[a] = taxonInfoContentJSON$phylum[1]
inat_data$taxon.class[a] = taxonInfoContentJSON$class[1]
inat_data$taxon.order[a] = taxonInfoContentJSON$order[1]
inat_data$taxon.family[a] = taxonInfoContentJSON$family[1]
if(is.na(taxonInfoContentJSON$isMarine[1])==FALSE) {
inat_data$marine[a] = taxonInfoContentJSON$isMarine[1]
}
if(is.na(taxonInfoContentJSON$isBrackish[1])==FALSE) {
inat_data$brackish[a] = taxonInfoContentJSON$isBrackish[1]
}
if(is.na(taxonInfoContentJSON$isFreshwater[1])==FALSE) {
inat_data$freshwater[a] = taxonInfoContentJSON$isFreshwater[1]
}
if(is.na(taxonInfoContentJSON$isTerrestrial[1])==FALSE) {
inat_data$terrestrial[a] = taxonInfoContentJSON$isTerrestrial[1]
}
} else {
inat_data$taxon.kingdom[a] = "taxon info not retrieved"
}
}
}
df <- filter(inat_data, marine %in% 1)
rm(df)
################################################################################
inat_data_filtered = inat_data
inat_data_filtered %>%
filter(marine == 1 | brackish == 1)
# bar plot of records by marine and brackish Phyla
taxonPhylum <- table(inat_data_filtered$taxon.phylum)
barplot(sort(taxonPhylum, decreasing = T),
horiz = TRUE, cex.names = 0.5,las = 2)
# bar plot of records by marine and brackish Phyla
df <- table(inat_data_filtered$taxon.phylum)
barplot(sort(df, decreasing = T),
horiz = TRUE, cex.names = 0.5,las = 2)
# bar plot of records by marine and brackish Phyla
df <- table(inat_data_filtered$taxon.kingdom)
barplot(sort(df, decreasing = T),
horiz = TRUE, cex.names = 0.5,las = 2)
View(inat_data_filtered)

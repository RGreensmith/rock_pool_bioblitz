library(spdep)    #for spatial analyses
library(tidyr)    #for data manipulation
library(rinat)     # using wrapper for downloading data
library(httr)      # for getting data using inat and WoRMS API's
library(lubridate) # for date conversion
library(dplyr)
library(utils)
# Define project ID and API parameters
project_slug <- "brpc-national-bioblitz-2025-practice"
# Download data using the rinat package
inat_data <- get_inat_obs_project(project_slug)
# Convert observed_on to date-time for comparison
inat_data$updated_at <- ymd_hms(inat_data$updated_at)
inat_data$time_observed_at <- ymd_hms(inat_data$time_observed_at)
last_update <- max(inat_data$updated_at)
cat("Last update:", as.character(last_update), "\n")
saved_data_path <- "../NatBioBlitz_iNat.RData"
if (file.exists(saved_data_path)) {
load(saved_data_path)
} else {
source("scripts/new get project obs function.R")
NatBioBlitz_iNat <- get_inat_obs_project_v2("brpc-national-bioblitz-2025")
save(NatBioBlitz_iNat, file = saved_data_path)
}
location_split <- strsplit(NatBioBlitz_iNat$location, ",")
location_df <- do.call(
rbind,
lapply(location_split, function(x) as.numeric(x))
)
colnames(location_df) <- c("latitude", "longitude")
NatBioBlitz_iNat <- cbind(NatBioBlitz_iNat, location_df) %>%
filter(!is.na(latitude), !is.na(longitude))
# create obs_points simple feature - Geodetic CRS:  WGS 84
obs_points <- st_as_sf(
NatBioBlitz_iNat,
coords = c("longitude", "latitude"),
crs = 4326
)
head(obs_points)
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
fig.align = "center",
fig.width = 8,
fig.height = 5
)
library(ggplot2)
library(dplyr)
library(showtext)
library(ggtext)
library(ggimage)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
library(knitr)
library(rinat)     # using wrapper for downloading data
library(httr)      # for getting data using inat and WoRMS API's
library(lubridate) # for date conversion
library(jsonlite)  # for getting WoRMS data
library(dplyr)     # for WoRMS data
library(utils)
library(sf)       # for setting up the layers to map
library(sp)       # for setting up the layers to map
library(adehabitatHR) # for setting up the layers to map
library(raster)   # for setting up the layers to map
# Fonts for plots
font_add_google("Montserrat", "mont")
font_add_google("Chivo", "chivo")
showtext_auto()
load("NatBioBlitz_iNat20250604.RData") #iNat BioBlitz Data as of 4th June 2025
# Placeholder for total counts and an icon-based infographic
data_summary <- data.frame(
category = c("Observers", "Records", "Species"),
value = c(NA, NA, NA) # Fill with actual numbers
)
# Define project ID and API parameters
project_slug <- "brpc-national-bioblitz-2025-practice"
# Download data using the rinat package
inat_data <- get_inat_obs_project(project_slug)
# Convert observed_on to date-time for comparison
inat_data$updated_at <- ymd_hms(inat_data$updated_at)
inat_data$time_observed_at <- ymd_hms(inat_data$time_observed_at)
last_update <- max(inat_data$updated_at)
# Load the non-native species list
non_native_species <- read.csv("Data/UK marine NNS.csv")
# Match observations against non-native species list
natbioblitz_nns <- subset(inat_data, taxon.id  %in% non_native_species$inat_id)
View(natbioblitz_nns)
View(non_native_species)
nnSpp=unique(as.character(natbioblitz_nns$taxon.name))
nnSpp
nnSpp=unique(as.character(natbioblitz_nns$taxon.name))
recordsInBuffer = matrix(ncol = 1, nrow = length(nnSpp))
row.names(recordsInBuffer)=nnSpp
recordsInBuffer
recordsInBuffer = matrix(ncol = 3, nrow = length(nnSpp))
row.names(recordsInBuffer)=nnSpp
col.names(recordsInBuffer)=c("NBN_recs_in_inat_buffer",
"total_inat_recs",
"percent_new_recs")
recordsInBuffer = matrix(ncol = 3, nrow = length(nnSpp))
recordsInBuffer=as.data.frame(recordsInBuffer)
row.names(recordsInBuffer)=nnSpp
col.names(recordsInBuffer)=c("NBN_recs_in_inat_buffer",
"total_inat_recs",
"percent_new_recs")
names(recordsInBuffer)=c("NBN_recs_in_inat_buffer",
"total_inat_recs",
"percent_new_recs")
recordsInBuffer
latinName=unique(as.character(natbioblitz_nns$taxon.name))
recordsInBuffer = matrix(ncol = 4, nrow = length(nnSpp))
recordsInBuffer=as.data.frame(recordsInBuffer)
row.names(recordsInBuffer)=nnSpp
names(recordsInBuffer)=c("latin_name","NBN_recs_in_inat_buffer",
"total_inat_recs",
"percent_new_recs")
recordsInBuffer$latin_name = latinName
recordsInBuffer
nnSpp=unique(as.character(natbioblitz_nns$taxon.common_name.name))
nnSpp
nnSpp=unique(as.character(natbioblitz_nns$taxon.common_name.name))
latinName=unique(as.character(natbioblitz_nns$taxon.name))
recordsInBuffer = matrix(ncol = 4, nrow = length(nnSpp))
recordsInBuffer=as.data.frame(recordsInBuffer)
row.names(recordsInBuffer)=nnSpp
names(recordsInBuffer)=c("latin_name","NBN_recs_in_inat_buffer",
"total_inat_recs",
"percent_new_recs")
recordsInBuffer$latin_name = latinName
recordsInBuffer
# Creating data frame for number of inat records at least 1km away from NBN Atlas records
nnSppCNm=unique(as.character(natbioblitz_nns$taxon.common_name.name))
nnSppSNm=unique(as.character(natbioblitz_nns$taxon.name))
recordsInBuffer = matrix(ncol = 4, nrow = length(nnSppCNm))
row.names(recordsInBuffer)=nnSppSNm
names(recordsInBuffer)=c("latin_name","NBN_recs_in_inat_buffer",
"total_inat_recs",
"percent_new_recs")
recordsInBuffer$latin_name = latinName
recordsInBuffer
# Creating data frame for number of inat records at least 1km away from NBN Atlas records
nnSppCNm=unique(as.character(natbioblitz_nns$taxon.common_name.name))
nnSppSNm=unique(as.character(natbioblitz_nns$taxon.name))
# Creating data frame for number of inat records at least 1km away from NBN Atlas records
nnSppCNm=unique(as.character(natbioblitz_nns$taxon.common_name.name))
nnSppSNm=unique(as.character(natbioblitz_nns$taxon.name))
recordsInBuffer = matrix(ncol = 4, nrow = length(nnSppCNm))
recordsInBuffer=as.data.frame(recordsInBuffer)
row.names(recordsInBuffer)=nnSppSNm
names(recordsInBuffer)=c("latin_name","NBN_recs_in_inat_buffer",
"total_inat_recs",
"percent_new_recs")
recordsInBuffer$latin_name = latinName
recordsInBuffer
a=1
####################### Get NBN Atlas Records for each point #################
# records of Sargassum muticum within 100km (radius=100.0) of a point in London
api2 = "https://records-ws.nbnatlas.org/occurrences/index/download?reasonTypeId=10&q=*:*&fq=genus:Sargassum&facets=rk_species:muticum&lat=51.5074&lon=0.1278&radius=100.0&qa=none"
download.file(url = api2,
destfile = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
mode = "wb")
download.file(url = api2,
destfile = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
mode = "wb")
dfNBN = readr::read_csv(unz(
description = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
filename = "data.csv"))
dfNBN=as.data.frame(dfNBN)
numRecords = length(dfNBN[,1])
recordsInBuffer$NBN_recs_in_inat_buffer[a]=numRecords
recordsInBuffer
recordsInBuffer$NBN_recs_in_inat_buffer[a]=recordsInBuffer$NBN_recs_in_inat_buffer[a]+numRecords
natbioblitz_nns_filtered = filter(natbioblitz_nns,
taxon.name == nnSppSNm[a])
View(natbioblitz_nns_filtered)
NBN_recs = rep(NA, times = length(natbioblitz_nns[,1]))
# Combine the inat_data dataframe with the new columns
natbioblitz_nns = cbind(natbioblitz_nns,terrestrial)
View(natbioblitz_nns)
# Combine the inat_data dataframe with the new columns
natbioblitz_nns = cbind(natbioblitz_nns,NBN_recs)
natbioblitz_nns_filtered = filter(natbioblitz_nns,
taxon.name == nnSppSNm[a])
length(natbioblitz_nns_filtered[,1])
View(natbioblitz_nns_filtered)
natbioblitz_nns_filtered$taxon.name[1]
binomClassNm = natbioblitz_nns_filtered$taxon.name[1]
binomClassNmSplit = strsplit(binomClassNm,"[ ]")
genus = binomClassNmSplit[[1]][1]
species = binomClassNmSplit[[1]][2]
genus
species
# Paste the genus and species names into the NBN Atlas API key and download relevant data
lat = natbioblitz_nns_filtered$latitude[b]
b=1
# Paste the genus and species names into the NBN Atlas API key and download relevant data
lat = natbioblitz_nns_filtered$latitude[b]
lon = natbioblitz_nns_filtered$longitude[b]
api = paste("https://records-ws.nbnatlas.org/occurrences/index/download?reasonTypeId=10&q=*:*&fq=genus:",
genus,
"&facets=rk_species:",
species,
"&lat=",
lat,
"&lon=",
lon,
"&radius=100.0&qa=none",
sep = "")
api
taxonInfo = GET(api)
api = paste("https://records-ws.nbnatlas.org/occurrences/index/download?reasonTypeId=10&q=*:*&fq=genus:",
genus,
"&facets=rk_species:",
species,
"&lat=",
lat,
"&lon=",
lon,
"&radius=10.0&qa=none",
sep = "")
taxonInfo = GET(api)
download.file(url = api,
destfile = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
mode = "wb")
dfNBN = readr::read_csv(unz(
description = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
filename = "data.csv"))
dfNBN=as.data.frame(dfNBN)
numRecords = length(dfNBN[,1])
numRecords
recordsInBuffer$NBN_recs_in_inat_buffer[a]=recordsInBuffer$NBN_recs_in_inat_buffer[a]+numRecords
recordsInBuffer
natbioblitz_nns_filtered$NBN_recs[b]=numRecords
for (b in 1:length(natbioblitz_nns_filtered[,1])) {
####################### Get NBN Atlas Records for each point #################
# records of Sargassum muticum within 100km (radius=100.0) of a point in London
# Paste the genus and species names into the NBN Atlas API key and download relevant data
lat = natbioblitz_nns_filtered$latitude[b]
lon = natbioblitz_nns_filtered$longitude[b]
api = paste("https://records-ws.nbnatlas.org/occurrences/index/download?reasonTypeId=10&q=*:*&fq=genus:",
genus,
"&facets=rk_species:",
species,
"&lat=",
lat,
"&lon=",
lon,
"&radius=10.0&qa=none",
sep = "")
taxonInfo = GET(api)
download.file(url = api,
destfile = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
mode = "wb")
dfNBN = readr::read_csv(unz(
description = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
filename = "data.csv"))
dfNBN=as.data.frame(dfNBN)
numRecords = length(dfNBN[,1])
recordsInBuffer$NBN_recs_in_inat_buffer[a]=recordsInBuffer$NBN_recs_in_inat_buffer[a]+numRecords
natbioblitz_nns_filtered$NBN_recs[b]=numRecords
}
b
api
taxonInfo = GET(api)
download.file(url = api,
destfile = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
mode = "wb")
################################################################################
# Creating data frame for number of inat records at least 1km away from NBN Atlas records
nnSppCNm=unique(as.character(natbioblitz_nns$taxon.common_name.name))
nnSppSNm=unique(as.character(natbioblitz_nns$taxon.name))
recordsInBuffer = matrix(ncol = 4, nrow = length(nnSppCNm))
recordsInBuffer=as.data.frame(recordsInBuffer)
row.names(recordsInBuffer)=nnSppSNm
names(recordsInBuffer)=c("latin_name","NBN_recs_in_inat_buffer",
"total_inat_recs",
"percent_new_recs")
recordsInBuffer$latin_name = latinName
NBN_recs = rep(NA, times = length(natbioblitz_nns[,1]))
# Combine the inat_data dataframe with the new columns
natbioblitz_nns = cbind(natbioblitz_nns,NBN_recs)
for (a in 1:length(nnSppSNm)) {
natbioblitz_nns_filtered = filter(natbioblitz_nns,
taxon.name == nnSppSNm[a])
binomClassNm = natbioblitz_nns_filtered$taxon.name[1]
binomClassNmSplit = strsplit(binomClassNm,"[ ]")
genus = binomClassNmSplit[[1]][1]
species = binomClassNmSplit[[1]][2]
for (b in 1:length(natbioblitz_nns_filtered[,1])) {
####################### Get NBN Atlas Records for each point #################
# records of Sargassum muticum within 100km (radius=100.0) of a point in London
# Paste the genus and species names into the NBN Atlas API key and download relevant data
lat = natbioblitz_nns_filtered$latitude[b]
lon = natbioblitz_nns_filtered$longitude[b]
api = paste("https://records-ws.nbnatlas.org/occurrences/index/download?reasonTypeId=10&q=*:*&fq=genus:",
genus,
"&facets=rk_species:",
species,
"&lat=",
lat,
"&lon=",
lon,
"&radius=10.0&qa=none",
sep = "")
taxonInfo = GET(api)
download.file(url = api,
destfile = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
mode = "wb")
dfNBN = readr::read_csv(unz(
description = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
filename = "data.csv"))
dfNBN=as.data.frame(dfNBN)
numRecords = length(dfNBN[,1])
recordsInBuffer$NBN_recs_in_inat_buffer[a]=recordsInBuffer$NBN_recs_in_inat_buffer[a]+numRecords
natbioblitz_nns_filtered$NBN_recs[b]=numRecords
}
}
rlang::last_trace()
rlang::last_trace(drop = FALSE)
natbioblitz_nns_filtered = filter(natbioblitz_nns,
taxon.name == nnSppSNm[a])
nnSppSNm[a]
# Combine the inat_data dataframe with the new columns
natbioblitz_nns = cbind(natbioblitz_nns,NBN_recs)
View(non_native_species)
View(natbioblitz_nns)
# Load the non-native species list
non_native_species <- read.csv("Data/UK marine NNS.csv")
# Match observations against non-native species list
natbioblitz_nns <- subset(inat_data, taxon.id  %in% non_native_species$inat_id)
View(natbioblitz_nns)
################################################################################
# Creating data frame for number of inat records at least 1km away from NBN Atlas records
nnSppCNm=unique(as.character(natbioblitz_nns$taxon.common_name.name))
nnSppSNm=unique(as.character(natbioblitz_nns$taxon.name))
recordsInBuffer = matrix(ncol = 4, nrow = length(nnSppCNm))
recordsInBuffer=as.data.frame(recordsInBuffer)
row.names(recordsInBuffer)=nnSppSNm
names(recordsInBuffer)=c("latin_name","NBN_recs_in_inat_buffer",
"total_inat_recs",
"percent_new_recs")
recordsInBuffer$latin_name = latinName
NBN_recs = rep(NA, times = length(natbioblitz_nns[,1]))
# Combine the inat_data dataframe with the new columns
natbioblitz_nns = cbind(natbioblitz_nns,NBN_recs)
View(natbioblitz_nns)
View(natbioblitz_nns_filtered)
a
b
natbioblitz_nns_filtered = filter(natbioblitz_nns,
taxon.name == nnSppSNm[a])
binomClassNm = natbioblitz_nns_filtered$taxon.name[1]
binomClassNmSplit = strsplit(binomClassNm,"[ ]")
genus = binomClassNmSplit[[1]][1]
species = binomClassNmSplit[[1]][2]
binomClassNm
View(natbioblitz_nns_filtered)
# Paste the genus and species names into the NBN Atlas API key and download relevant data
lat = natbioblitz_nns_filtered$latitude[b]
lon = natbioblitz_nns_filtered$longitude[b]
api = paste("https://records-ws.nbnatlas.org/occurrences/index/download?reasonTypeId=10&q=*:*&fq=genus:",
genus,
"&facets=rk_species:",
species,
"&lat=",
lat,
"&lon=",
lon,
"&radius=10.0&qa=none",
sep = "")
taxonInfo = GET(api)
download.file(url = api,
destfile = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
mode = "wb")
dfNBN = readr::read_csv(unz(
description = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
filename = "data.csv"))
dfNBN=as.data.frame(dfNBN)
numRecords = length(dfNBN[,1])
recordsInBuffer$NBN_recs_in_inat_buffer[a]=recordsInBuffer$NBN_recs_in_inat_buffer[a]+numRecords
natbioblitz_nns_filtered$NBN_recs[b]=numRecords
b=3
b=1
for (b in 1:length(natbioblitz_nns_filtered[,1])) {
####################### Get NBN Atlas Records for each point #################
# records of Sargassum muticum within 100km (radius=100.0) of a point in London
# Paste the genus and species names into the NBN Atlas API key and download relevant data
lat = natbioblitz_nns_filtered$latitude[b]
lon = natbioblitz_nns_filtered$longitude[b]
api = paste("https://records-ws.nbnatlas.org/occurrences/index/download?reasonTypeId=10&q=*:*&fq=genus:",
genus,
"&facets=rk_species:",
species,
"&lat=",
lat,
"&lon=",
lon,
"&radius=10.0&qa=none",
sep = "")
taxonInfo = GET(api)
download.file(url = api,
destfile = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
mode = "wb")
dfNBN = readr::read_csv(unz(
description = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
filename = "data.csv"))
dfNBN=as.data.frame(dfNBN)
numRecords = length(dfNBN[,1])
recordsInBuffer$NBN_recs_in_inat_buffer[a]=recordsInBuffer$NBN_recs_in_inat_buffer[a]+numRecords
natbioblitz_nns_filtered$NBN_recs[b]=numRecords
}
for (b in 1:length(natbioblitz_nns_filtered[,1])) {
####################### Get NBN Atlas Records for each point #################
# records of Sargassum muticum within 100km (radius=100.0) of a point in London
# Paste the genus and species names into the NBN Atlas API key and download relevant data
lat = natbioblitz_nns_filtered$latitude[b]
lon = natbioblitz_nns_filtered$longitude[b]
api = paste("https://records-ws.nbnatlas.org/occurrences/index/download?reasonTypeId=17&q=*:*&fq=genus:",
genus,
"&facets=rk_species:",
species,
"&lat=",
lat,
"&lon=",
lon,
"&radius=10.0&qa=none",
sep = "")
taxonInfo = GET(api)
download.file(url = api,
destfile = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
mode = "wb")
dfNBN = readr::read_csv(unz(
description = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
filename = "data.csv"))
dfNBN=as.data.frame(dfNBN)
numRecords = length(dfNBN[,1])
recordsInBuffer$NBN_recs_in_inat_buffer[a]=recordsInBuffer$NBN_recs_in_inat_buffer[a]+numRecords
natbioblitz_nns_filtered$NBN_recs[b]=numRecords
}
b
api = paste("https://records-ws.nbnatlas.org/occurrences/index/download?reasonTypeId=17&q=*:*&fq=genus:",
genus,
"&facets=rk_species:",
species,
"&lat=",
lat,
"&lon=",
lon,
"&radius=10.0&qa=none",
"&flimit=10",
sep = "")
b
api
taxonInfo = GET(api)
download.file(url = api,
destfile = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
mode = "wb")
for (b in 1:length(natbioblitz_nns_filtered[,1])) {
####################### Get NBN Atlas Records for each point #################
# records of Sargassum muticum within 100km (radius=100.0) of a point in London
# Paste the genus and species names into the NBN Atlas API key and download relevant data
lat = natbioblitz_nns_filtered$latitude[b]
lon = natbioblitz_nns_filtered$longitude[b]
api = paste("https://records-ws.nbnatlas.org/occurrences/index/download?reasonTypeId=17&q=*:*&fq=genus:",
genus,
"&facets=rk_species:",
species,
"&lat=",
lat,
"&lon=",
lon,
"&radius=10.0&qa=none",
"&flimit=10",
sep = "")
taxonInfo = GET(api)
download.file(url = api,
destfile = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
mode = "wb")
dfNBN = readr::read_csv(unz(
description = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
filename = "data.csv"))
dfNBN=as.data.frame(dfNBN)
numRecords = length(dfNBN[,1])
recordsInBuffer$NBN_recs_in_inat_buffer[a]=recordsInBuffer$NBN_recs_in_inat_buffer[a]+numRecords
natbioblitz_nns_filtered$NBN_recs[b]=numRecords
}
View(dfNBN)
rm(dfNBN)
api = paste("https://records-ws.nbnatlas.org/occurrences/index/download?reasonTypeId=17&q=*:*&fq=genus:",
genus,
"&facets=rk_species:",
species,
"&lat=",
lat,
"&lon=",
lon,
"&radius=10.0&qa=none",
"&flimit=10",
sep = "")
taxonInfo = GET(api)
download.file(url = api,
destfile = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
mode = "wb")
taxonInfo = GET(api)
download.file(url = api,
destfile = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
mode = "wb")
download.file(url = api,
destfile = "C:/Users/Rose/rock_pool_bioblitz/data.zip",
mode = "wb")
